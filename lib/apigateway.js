"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwnApiGateway = void 0;
const aws_apigateway_1 = require("aws-cdk-lib/aws-apigateway");
const constructs_1 = require("constructs");
class SwnApiGateway extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        //Product-API
        this.createProductApi(props.productMicroservice);
        //Basket-API
        this.createBasketApi(props.basketMicroservice);
        //Oder-API
        this.createOrderApi(props.orderingMicroservice);
    }
    createOrderApi(orderMicroservice) {
        //Ordering microservices api gateway 
        //root name = order
        //GET /order
        //GET /oder/{userName}
        const apigw = new aws_apigateway_1.LambdaRestApi(this, 'orderApi', {
            restApiName: 'Order Service',
            handler: orderMicroservice,
            proxy: false
        });
        const order = apigw.root.addResource('order');
        order.addMethod('GET');
        const singleOrder = order.addResource('{userName}');
        singleOrder.addMethod('GET');
        //  return singleOrder;
    }
    createBasketApi(basketMicroservice) {
        //Basket microservices api gateway
        //root name=basket
        //GET /basket
        // POST /basket
        // resource name = basket/{userName}
        // GET /basket/{userName}
        // DELETE /basket/{userName}
        // POST /basket/checkout
        const apigw = new aws_apigateway_1.LambdaRestApi(this, 'basketApi', {
            restApiName: 'Basket Service',
            handler: basketMicroservice,
            proxy: false
        });
        const basket = apigw.root.addResource('basket');
        basket.addMethod('GET'); //GET method /product
        basket.addMethod('POST');
        const singleBasket = basket.addResource('{userName}'); //basket/{userName}
        singleBasket.addMethod('GET'); //GET /basket/{userName}
        singleBasket.addMethod('DELETE'); //DELETE /basket/{userName}
        const basketCheckout = basket.addResource('checkout');
        basketCheckout.addMethod('POST'); //POST /basket
    }
    createProductApi(productMicroservice) {
        const apigw = new aws_apigateway_1.LambdaRestApi(this, 'productApi', {
            restApiName: 'Product Service',
            handler: productMicroservice,
            proxy: false
        });
        const product = apigw.root.addResource('product');
        product.addMethod('GET'); //GET method /product
        product.addMethod('POST');
        const singleProduct = product.addResource('{id}'); //product/{id}
        singleProduct.addMethod('GET'); //GET /product/{id}
        singleProduct.addMethod('PUT'); //PUT /product/{id}
        singleProduct.addMethod('DELETE'); //DELETE /product/{id}
    }
}
exports.SwnApiGateway = SwnApiGateway;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpZ2F0ZXdheS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwaWdhdGV3YXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0RBQTJEO0FBRTNELDJDQUF1QztBQVF2QyxNQUFhLGFBQWMsU0FBUSxzQkFBUztJQUV4QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXlCO1FBQy9ELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsYUFBYTtRQUNiLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNqRCxZQUFZO1FBQ1osSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUUvQyxVQUFVO1FBQ1YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUdwRCxDQUFDO0lBR08sY0FBYyxDQUFDLGlCQUE0QjtRQUMvQyxxQ0FBcUM7UUFDckMsbUJBQW1CO1FBRW5CLFlBQVk7UUFDWixzQkFBc0I7UUFFdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSw4QkFBYSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDOUMsV0FBVyxFQUFFLGVBQWU7WUFDNUIsT0FBTyxFQUFFLGlCQUFpQjtZQUMxQixLQUFLLEVBQUUsS0FBSztTQUNmLENBQUMsQ0FBQztRQUVILE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7UUFFdEIsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNuRCxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRTlCLHVCQUF1QjtJQUt6QixDQUFDO0lBRU8sZUFBZSxDQUFDLGtCQUE2QjtRQUNqRCxrQ0FBa0M7UUFDbEMsa0JBQWtCO1FBQ2xCLGFBQWE7UUFDYixlQUFlO1FBRWYsb0NBQW9DO1FBQ3BDLHlCQUF5QjtRQUN6Qiw0QkFBNEI7UUFFNUIsd0JBQXdCO1FBR3pCLE1BQU0sS0FBSyxHQUFFLElBQUksOEJBQWEsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO1lBQ2pELFdBQVcsRUFBQyxnQkFBZ0I7WUFDNUIsT0FBTyxFQUFFLGtCQUFrQjtZQUMzQixLQUFLLEVBQUUsS0FBSztTQUNaLENBQUMsQ0FBQztRQUVILE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxxQkFBcUI7UUFDOUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUV4QixNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsbUJBQW1CO1FBQzFFLFlBQVksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyx3QkFBd0I7UUFDdkQsWUFBWSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBLDJCQUEyQjtRQUU1RCxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RELGNBQWMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxjQUFjO0lBR3BELENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxtQkFBOEI7UUFDbkQsTUFBTSxLQUFLLEdBQUcsSUFBSSw4QkFBYSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUU7WUFDaEQsV0FBVyxFQUFFLGlCQUFpQjtZQUM5QixPQUFPLEVBQUUsbUJBQW1CO1lBQzVCLEtBQUssRUFBRSxLQUFLO1NBQ2YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEQsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHFCQUFxQjtRQUMvQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRXpCLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxjQUFjO1FBQ2pFLGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxtQkFBbUI7UUFDbkQsYUFBYSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLG1CQUFtQjtRQUNuRCxhQUFhLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUEsc0JBQXNCO0lBRTVELENBQUM7Q0FDSjtBQTVGRCxzQ0E0RkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMYW1iZGFSZXN0QXBpIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1hcGlnYXRld2F5XCI7XHJcbmltcG9ydCB7IElGdW5jdGlvbiB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbGFtYmRhXCI7XHJcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XHJcblxyXG5pbnRlcmZhY2UgU3duQXBpZ2F0ZXdheVByb3Bze1xyXG4gICAgYmFza2V0TWljcm9zZXJ2aWNlOiBJRnVuY3Rpb25cclxuICAgIHByb2R1Y3RNaWNyb3NlcnZpY2U6IElGdW5jdGlvblxyXG4gICAgb3JkZXJpbmdNaWNyb3NlcnZpY2U6IElGdW5jdGlvblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3duQXBpR2F0ZXdheSBleHRlbmRzIENvbnN0cnVjdHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU3duQXBpZ2F0ZXdheVByb3BzKXtcclxuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xyXG4gICAgICAgIC8vUHJvZHVjdC1BUElcclxuICAgICAgICB0aGlzLmNyZWF0ZVByb2R1Y3RBcGkocHJvcHMucHJvZHVjdE1pY3Jvc2VydmljZSk7XHJcbiAgICAgICAgLy9CYXNrZXQtQVBJXHJcbiAgICAgICAgdGhpcy5jcmVhdGVCYXNrZXRBcGkocHJvcHMuYmFza2V0TWljcm9zZXJ2aWNlKTtcclxuXHJcbiAgICAgICAgLy9PZGVyLUFQSVxyXG4gICAgICAgIHRoaXMuY3JlYXRlT3JkZXJBcGkocHJvcHMub3JkZXJpbmdNaWNyb3NlcnZpY2UpO1xyXG5cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVPcmRlckFwaShvcmRlck1pY3Jvc2VydmljZTogSUZ1bmN0aW9uKSB7XHJcbiAgICAgICAgLy9PcmRlcmluZyBtaWNyb3NlcnZpY2VzIGFwaSBnYXRld2F5IFxyXG4gICAgICAgIC8vcm9vdCBuYW1lID0gb3JkZXJcclxuXHJcbiAgICAgICAgLy9HRVQgL29yZGVyXHJcbiAgICAgICAgLy9HRVQgL29kZXIve3VzZXJOYW1lfVxyXG5cclxuICAgICAgICBjb25zdCBhcGlndyA9IG5ldyBMYW1iZGFSZXN0QXBpKHRoaXMsICdvcmRlckFwaScsIHtcclxuICAgICAgICAgICAgcmVzdEFwaU5hbWU6ICdPcmRlciBTZXJ2aWNlJyxcclxuICAgICAgICAgICAgaGFuZGxlcjogb3JkZXJNaWNyb3NlcnZpY2UsXHJcbiAgICAgICAgICAgIHByb3h5OiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBvcmRlciA9IGFwaWd3LnJvb3QuYWRkUmVzb3VyY2UoJ29yZGVyJyk7XHJcbiAgICAgICAgb3JkZXIuYWRkTWV0aG9kKCdHRVQnKVxyXG5cclxuICAgICAgICBjb25zdCBzaW5nbGVPcmRlciA9IG9yZGVyLmFkZFJlc291cmNlKCd7dXNlck5hbWV9JylcclxuICAgICAgICBzaW5nbGVPcmRlci5hZGRNZXRob2QoJ0dFVCcpXHJcblxyXG4gICAgICAvLyAgcmV0dXJuIHNpbmdsZU9yZGVyO1xyXG5cclxuXHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNyZWF0ZUJhc2tldEFwaShiYXNrZXRNaWNyb3NlcnZpY2U6IElGdW5jdGlvbikge1xyXG4gICAgICAgIC8vQmFza2V0IG1pY3Jvc2VydmljZXMgYXBpIGdhdGV3YXlcclxuICAgICAgICAvL3Jvb3QgbmFtZT1iYXNrZXRcclxuICAgICAgICAvL0dFVCAvYmFza2V0XHJcbiAgICAgICAgLy8gUE9TVCAvYmFza2V0XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gcmVzb3VyY2UgbmFtZSA9IGJhc2tldC97dXNlck5hbWV9XHJcbiAgICAgICAgLy8gR0VUIC9iYXNrZXQve3VzZXJOYW1lfVxyXG4gICAgICAgIC8vIERFTEVURSAvYmFza2V0L3t1c2VyTmFtZX1cclxuXHJcbiAgICAgICAgLy8gUE9TVCAvYmFza2V0L2NoZWNrb3V0XHJcblxyXG5cclxuICAgICAgIGNvbnN0IGFwaWd3ID1uZXcgTGFtYmRhUmVzdEFwaSh0aGlzLCAnYmFza2V0QXBpJywge1xyXG4gICAgICAgIHJlc3RBcGlOYW1lOidCYXNrZXQgU2VydmljZScsXHJcbiAgICAgICAgaGFuZGxlcjogYmFza2V0TWljcm9zZXJ2aWNlLFxyXG4gICAgICAgIHByb3h5OiBmYWxzZVxyXG4gICAgICAgfSk7XHJcblxyXG4gICAgICAgY29uc3QgYmFza2V0ID0gYXBpZ3cucm9vdC5hZGRSZXNvdXJjZSgnYmFza2V0Jyk7XHJcbiAgICAgICAgYmFza2V0LmFkZE1ldGhvZCgnR0VUJyk7IC8vR0VUIG1ldGhvZCAvcHJvZHVjdFxyXG4gICAgICAgIGJhc2tldC5hZGRNZXRob2QoJ1BPU1QnKVxyXG4gICAgXHJcbiAgICAgICAgY29uc3Qgc2luZ2xlQmFza2V0ID0gYmFza2V0LmFkZFJlc291cmNlKCd7dXNlck5hbWV9Jyk7IC8vYmFza2V0L3t1c2VyTmFtZX1cclxuICAgICAgICBzaW5nbGVCYXNrZXQuYWRkTWV0aG9kKCdHRVQnKTsgLy9HRVQgL2Jhc2tldC97dXNlck5hbWV9XHJcbiAgICAgICAgc2luZ2xlQmFza2V0LmFkZE1ldGhvZCgnREVMRVRFJyk7Ly9ERUxFVEUgL2Jhc2tldC97dXNlck5hbWV9XHJcblxyXG4gICAgICAgIGNvbnN0IGJhc2tldENoZWNrb3V0ID0gYmFza2V0LmFkZFJlc291cmNlKCdjaGVja291dCcpO1xyXG4gICAgICAgIGJhc2tldENoZWNrb3V0LmFkZE1ldGhvZCgnUE9TVCcpOyAvL1BPU1QgL2Jhc2tldFxyXG5cclxuXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByaXZhdGUgY3JlYXRlUHJvZHVjdEFwaShwcm9kdWN0TWljcm9zZXJ2aWNlOiBJRnVuY3Rpb24pIHtcclxuICAgICAgICBjb25zdCBhcGlndyA9IG5ldyBMYW1iZGFSZXN0QXBpKHRoaXMsICdwcm9kdWN0QXBpJywge1xyXG4gICAgICAgICAgICByZXN0QXBpTmFtZTogJ1Byb2R1Y3QgU2VydmljZScsXHJcbiAgICAgICAgICAgIGhhbmRsZXI6IHByb2R1Y3RNaWNyb3NlcnZpY2UsXHJcbiAgICAgICAgICAgIHByb3h5OiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBwcm9kdWN0ID0gYXBpZ3cucm9vdC5hZGRSZXNvdXJjZSgncHJvZHVjdCcpO1xyXG4gICAgICAgIHByb2R1Y3QuYWRkTWV0aG9kKCdHRVQnKTsgLy9HRVQgbWV0aG9kIC9wcm9kdWN0XHJcbiAgICAgICAgcHJvZHVjdC5hZGRNZXRob2QoJ1BPU1QnKVxyXG4gICAgXHJcbiAgICAgICAgY29uc3Qgc2luZ2xlUHJvZHVjdCA9IHByb2R1Y3QuYWRkUmVzb3VyY2UoJ3tpZH0nKTsgLy9wcm9kdWN0L3tpZH1cclxuICAgICAgICBzaW5nbGVQcm9kdWN0LmFkZE1ldGhvZCgnR0VUJyk7IC8vR0VUIC9wcm9kdWN0L3tpZH1cclxuICAgICAgICBzaW5nbGVQcm9kdWN0LmFkZE1ldGhvZCgnUFVUJyk7IC8vUFVUIC9wcm9kdWN0L3tpZH1cclxuICAgICAgICBzaW5nbGVQcm9kdWN0LmFkZE1ldGhvZCgnREVMRVRFJyk7Ly9ERUxFVEUgL3Byb2R1Y3Qve2lkfVxyXG5cclxuICAgIH1cclxufSJdfQ==